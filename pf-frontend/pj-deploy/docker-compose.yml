name: ${PROJECT_NAME}
services:
  postgres:
    image: postgres:17-alpine
    container_name: ${PROJECT_NAME}-db
    restart: always
    volumes:
      - pf-data:/var/lib/postgresql/data
      - ./_entrypoint:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_APP_USER=${POSTGRES_APP_USER}
      - POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD}
      
    networks:
      - pf-net
  backend:
    depends_on:
      - postgres
    image: ${BACKEND_IMAGE_NAME}
    container_name: ${PROJECT_NAME}-backend
    restart: always
    networks:
      - pf-net
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${PROJECT_NAME}-db
      - POSTGRES_APP_USER=${POSTGRES_APP_USER}
      - POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD}
       - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs:/app/logs
    post_start:
      - command:
          [
            "sh",
            "-c",
            'npm run db:migrate | awk ''{ print strftime("[%Y-%m-%d %H:%M:%S]"), $0; fflush(); }'' | tee -a /app/logs/migration.log',
          ]
  frontend:
    depends_on:
      - backend
    image: ${FRONTEND_IMAGE_NAME}
    container_name: ${PROJECT_NAME}-frontend
    restart: always
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    networks:
      - pf-net
    environment:
      - NGINX_PROXY=http://${PROJECT_NAME}-backend:3000
      - NGINX_PORT=${FRONTEND_PORT}
volumes:
  pf-data:
    name: ${PROJECT_NAME}-pf-data
networks:
  pf-net:
    name: ${PROJECT_NAME}-pf-net
